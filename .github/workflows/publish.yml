name: publish

env:
  NODE_VERSION: 18.x
  NODE_REGISTRY: 'https://registry.npmjs.org'

on:
  push:
    tags:
      - v*.*.*
      - v*.*
      - v*

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.define.outputs.include }}
    steps:
      - name: Define Target Matrix
        id: define
        uses: dherman/target-matrix@v0.0.2
        with:
          toolchain: rust
          windows-latest: x86_64-pc-windows-msvc
          macos-latest: x86_64-apple-darwin
          ubuntu-latest: x86_64-unknown-linux-gnu

  pack:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Dependencies
        run: npm install
      - name: Pack
        run: |
          mkdir -p release
          npm pack --pack-destination=release
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.tgz

  build:
    needs: matrix
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.include) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install cross-rs
        uses: actions-rs/install@v0.1.2
        with:
          crate: cross
          version: latest
      - name: Install Dependencies
        run: npm install
      - name: Cross
        shell: bash
        run: CARGO_BUILD_TARGET=${{ matrix.target }} npm run cross
      - name: Pack
        shell: bash
        run: |
          mkdir -p release
          tarball=$(npx neon-prebuild ${{ matrix.target }} index.node)
          mv $tarball release/
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*.tgz

  publish:
    needs: [pack, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.NODE_REGISTRY }}
          cache: npm
      - name: Get Tag Name
        uses: olegtarasov/get-tag@v2.1.2
        id: tagName
      - name: Fetch Packages
        uses: robinraju/release-downloader@v1.7
        with:
          tag: ${{ steps.tagName.outputs.tag }}
          fileName: "*.tgz"
          out-file-path: release
      - name: Get Package Metadata
        id: package
        run: |
          echo "version=$(cat package.json | jq -r .version)" > $GITHUB_OUTPUT
          echo "name=$(cat package.json | jq -r .name)" >> $GITHUB_OUTPUT
      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd release
          pwd
          ls
          for p in ${{ steps.package.outputs.name }}-*-${{ steps.package.outputs.version }}.tgz; do
            npm publish --access public $p
          done
          npm publish ${{ steps.package.outputs.name }}-${{ steps.package.outputs.version }}.tgz
